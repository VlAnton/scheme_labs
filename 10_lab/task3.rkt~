#lang racket

(define (split str delim)
  (flatten
   (foldr (Î»(char result)
            (define current_head (car result))
            (define current_char_is_delim? (equal? delim (string char)))
            (define delim_contains_char? (string-contains? delim (string char)))
            (define delim_contains_current_head? (string-contains? delim current_head))

            (if (and (not current_char_is_delim?) delim_contains_char? (not delim_contains_current_head?))
                (list (string char) result)
                (cond
                  [(equal? current_head delim) (cons (string char) (cdr result))]
                  [current_char_is_delim? (cons "" result)]
                  [delim_contains_char? (list (string-append (string char) current_head) (cdr result))]
                  [else (list (string-append (string char) current_head) (cdr result))]
                  )
                )
            ) '("") (string->list str)
              )
   )
  )