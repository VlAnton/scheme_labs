#lang racket

(define (task5 matr)
  (define columns (get-columns matr))  ; получаем список столбцов до начала итерации

  (define (iter matr row)
    (define row_or_false (foldl (λ(column res)  ; функция, возвращающая либо #f либо текущую строку, в зависимости от того, есть ли совпадающий с ней столбец
                                  (if (equal? column row)  ; сравниваем текущий столбец со строкой
                                      row  ; если равны – в результат записывается строка
                                      (if (list? res)  ; если результат не #f
                                          res  ; оставляем результат не тронутым
                                          #f  ; иначе – #f
                                          )
                                      )
                                  ) #f columns  ; подаём в foldl столбики, а результат изначально #f, так как нужной нам строки может и не быть
                                    )
      )
    (if (list? row_or_false)  ; проверяем, является ли row_or_false строкой или #f
        row_or_false  ; если row_or_false строка, то возвращаем текущую строку и прекращаем итерацию
        (if (empty? matr)  ; иначе проверяем матрицу на пустоту, чтобы была точка выхода в случае если нет нужных нам строк
            #f  ; если пустая, значит таких строк нет и мы возвращает #f
            (iter (cdr matr) (car matr))  ; иначе, продолжаем итерацию
            )
        )
    )
  (iter matr (car matr))  ; запускаем итерацию в основной функции
  )

(define (get-columns matrix)  ; возвращает список всех столбцов матрицы
  (apply map list matrix)
  )
